"""
Django settings for baza_pracownikow project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-0)t-!u9g9^^@oip8q2hqs=*tx&8i7!@_5j9!3x=1t31xp-!p(a')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = ["*"] 

# CSRF settings for Railway
CSRF_TRUSTED_ORIGINS = [
    "https://renewed-miracle-baza.up.railway.app",
    "https://*.up.railway.app",  # For any Railway subdomain
    "http://localhost:8000",     # For local development
    "http://127.0.0.1:8000",     # For local development
]

# Get Railway domain from environment if available
if 'RAILWAY_PUBLIC_DOMAIN' in os.environ:
    CSRF_TRUSTED_ORIGINS.append(f"https://{os.environ['RAILWAY_PUBLIC_DOMAIN']}")

# Session cookie settings for Railway
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https') 


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',
    'corsheaders',
    'rest_framework',
    'django_filters',
    'pracownicy.apps.PracownicyConfig',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'rest_framework.authtoken',
    'dj_rest_auth',
    'dj_rest_auth.registration',
]

SITE_ID = 1

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # For static files on Railway
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'pracownicy.middleware.SetPasswordAfterSocialMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'baza_pracownikow.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'baza_pracownikow.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

import dj_database_url

# Default SQLite for development
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Use PostgreSQL on Railway
if 'DATABASE_URL' in os.environ:
    DATABASES['default'] = dj_database_url.parse(os.environ.get('DATABASE_URL'))


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter',
        'rest_framework.filters.SearchFilter',
    ],
}

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
# STATICFILES_DIRS = [BASE_DIR / 'static']  # Removed - directory deleted
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Whitenoise configuration for static files on Railway
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django Channels
ASGI_APPLICATION = 'baza_pracownikow.asgi.application'

# Redis URL for Railway (will be set as environment variable)
REDIS_URL = os.environ.get('REDIS_URL', 'redis://localhost:6379')

# Use Redis in production if available, InMemory for local development
if 'REDIS_URL' in os.environ:
    try:
        CHANNEL_LAYERS = {
            'default': {
                'BACKEND': 'channels_redis.layers.RedisChannelLayer',
                'CONFIG': {
                    "hosts": [REDIS_URL],
                    "capacity": 300,  # Zmniejszone dla Railway
                    "expiry": 60,     # Dłuższy czas dla WebRTC
                },
            }
        }
        print(f"Using Redis channel layer: {REDIS_URL}")
    except Exception as e:
        print(f"Redis connection failed: {e}")
        CHANNEL_LAYERS = {
            'default': {
                'BACKEND': 'channels.layers.InMemoryChannelLayer',
                'CONFIG': {
                    'capacity': 50,  # Bardzo małe dla Railway
                    'expiry': 30,
                }
            }
        }
        print("Fallback to InMemory channel layer")
else:
    # Local development - InMemory
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels.layers.InMemoryChannelLayer',
            'CONFIG': {
                'capacity': 100,
                'expiry': 60,
            }
        }
    }
    print("Using InMemory channel layer for local development")

# Login/Logout settings
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = 'lista_pracownikow'
LOGOUT_REDIRECT_URL = '/accounts/logged_out/'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 465
EMAIL_USE_SSL = True
EMAIL_USE_TLS = False
EMAIL_HOST_USER = 'baza.pracownikow.response@gmail.com'
EMAIL_HOST_PASSWORD = 'iqxsycuajnozndin'  
DEFAULT_FROM_EMAIL = 'baza.pracownikow.response@gmail.com'
SERVER_EMAIL = 'baza.pracownikow.response@gmail.com'

# Django allauth settings
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

ACCOUNT_EMAIL_VERIFICATION = 'none'

# Modern AllAuth settings (Django-allauth 0.57+)
ACCOUNT_LOGIN_METHODS = {'email', 'username'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*']

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
        'VERIFIED_EMAIL': True,
    }
}

SOCIALACCOUNT_LOGIN_ON_GET = True

MEDIA_ROOT = BASE_DIR / 'media'
MEDIA_URL = '/media/'

# Ensure media directory exists
import os
try:
    os.makedirs(MEDIA_ROOT, exist_ok=True)
    os.makedirs(MEDIA_ROOT / 'dokumenty' / 'zdjecia', exist_ok=True)
    os.makedirs(MEDIA_ROOT / 'dokumenty' / 'cv', exist_ok=True)
    os.makedirs(MEDIA_ROOT / 'dokumenty' / 'umowy', exist_ok=True)
    os.makedirs(MEDIA_ROOT / 'dokumenty' / 'swiadectwa', exist_ok=True)
    os.makedirs(MEDIA_ROOT / 'dokumenty' / 'dyplomy', exist_ok=True)
    os.makedirs(MEDIA_ROOT / 'dokumenty' / 'inne', exist_ok=True)
except Exception as e:
    print(f"Warning: Could not create media directories: {e}")

# WhiteNoise configuration for media files in production
if not DEBUG:
    # In production, serve media files through WhiteNoise
    WHITENOISE_USE_FINDERS = True
    WHITENOISE_AUTOREFRESH = True

# CORS settings for websockets and API
CORS_ALLOW_CREDENTIALS = True

# Allow specific origins for production
CORS_ALLOWED_ORIGINS = [
    "https://renewed-miracle-baza.up.railway.app",
    "https://*.up.railway.app",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

# For development, you can use CORS_ALLOW_ALL_ORIGINS = True
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True

# WebSocket CORS settings
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'sec-websocket-key',
    'sec-websocket-version',
    'sec-websocket-protocol',
]